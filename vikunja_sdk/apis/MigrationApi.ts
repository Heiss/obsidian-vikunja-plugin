/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-832-2d358a57cc
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HandlerAuthURL,
  MicrosofttodoMigration,
  MigrationStatus,
  ModelsMessage,
  TodoistMigration,
  TrelloMigration,
} from '../models/index';
import {
    HandlerAuthURLFromJSON,
    HandlerAuthURLToJSON,
    MicrosofttodoMigrationFromJSON,
    MicrosofttodoMigrationToJSON,
    MigrationStatusFromJSON,
    MigrationStatusToJSON,
    ModelsMessageFromJSON,
    ModelsMessageToJSON,
    TodoistMigrationFromJSON,
    TodoistMigrationToJSON,
    TrelloMigrationFromJSON,
    TrelloMigrationToJSON,
} from '../models/index';

export interface MigrationMicrosoftTodoMigratePostRequest {
    migrationCode: MicrosofttodoMigration;
}

export interface MigrationTicktickMigratePostRequest {
    _import: string;
}

export interface MigrationTodoistMigratePostRequest {
    migrationCode: TodoistMigration;
}

export interface MigrationTrelloMigratePostRequest {
    migrationCode: TrelloMigration;
}

export interface MigrationVikunjaFileMigratePostRequest {
    _import: string;
}

/**
 * 
 */
export class MigrationApi extends runtime.BaseAPI {

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from Microsoft Todo to Vikunja.
     * Get the auth url from Microsoft Todo
     */
    async migrationMicrosoftTodoAuthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlerAuthURL>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/microsoft-todo/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlerAuthURLFromJSON(jsonValue));
    }

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from Microsoft Todo to Vikunja.
     * Get the auth url from Microsoft Todo
     */
    async migrationMicrosoftTodoAuthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlerAuthURL> {
        const response = await this.migrationMicrosoftTodoAuthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Migrates all tasklinsts, tasks, notes and reminders from Microsoft Todo to Vikunja.
     * Migrate all projects, tasks etc. from Microsoft Todo
     */
    async migrationMicrosoftTodoMigratePostRaw(requestParameters: MigrationMicrosoftTodoMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['migrationCode'] == null) {
            throw new runtime.RequiredError(
                'migrationCode',
                'Required parameter "migrationCode" was null or undefined when calling migrationMicrosoftTodoMigratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/microsoft-todo/migrate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MicrosofttodoMigrationToJSON(requestParameters['migrationCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Migrates all tasklinsts, tasks, notes and reminders from Microsoft Todo to Vikunja.
     * Migrate all projects, tasks etc. from Microsoft Todo
     */
    async migrationMicrosoftTodoMigratePost(requestParameters: MigrationMicrosoftTodoMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.migrationMicrosoftTodoMigratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationMicrosoftTodoStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MigrationStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/microsoft-todo/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MigrationStatusFromJSON(jsonValue));
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationMicrosoftTodoStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MigrationStatus> {
        const response = await this.migrationMicrosoftTodoStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Imports all projects, tasks, notes, reminders, subtasks and files from a TickTick backup export into Vikunja.
     * Import all projects, tasks etc. from a TickTick backup export
     */
    async migrationTicktickMigratePostRaw(requestParameters: MigrationTicktickMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['_import'] == null) {
            throw new runtime.RequiredError(
                '_import',
                'Required parameter "_import" was null or undefined when calling migrationTicktickMigratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['_import'] != null) {
            formParams.append('import', requestParameters['_import'] as any);
        }

        const response = await this.request({
            path: `/migration/ticktick/migrate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Imports all projects, tasks, notes, reminders, subtasks and files from a TickTick backup export into Vikunja.
     * Import all projects, tasks etc. from a TickTick backup export
     */
    async migrationTicktickMigratePost(requestParameters: MigrationTicktickMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.migrationTicktickMigratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTicktickStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MigrationStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/ticktick/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MigrationStatusFromJSON(jsonValue));
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTicktickStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MigrationStatus> {
        const response = await this.migrationTicktickStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from todoist to Vikunja.
     * Get the auth url from todoist
     */
    async migrationTodoistAuthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlerAuthURL>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/todoist/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlerAuthURLFromJSON(jsonValue));
    }

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from todoist to Vikunja.
     * Get the auth url from todoist
     */
    async migrationTodoistAuthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlerAuthURL> {
        const response = await this.migrationTodoistAuthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Migrates all projects, tasks, notes, reminders, subtasks and files from todoist to vikunja.
     * Migrate all lists, tasks etc. from todoist
     */
    async migrationTodoistMigratePostRaw(requestParameters: MigrationTodoistMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['migrationCode'] == null) {
            throw new runtime.RequiredError(
                'migrationCode',
                'Required parameter "migrationCode" was null or undefined when calling migrationTodoistMigratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/todoist/migrate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TodoistMigrationToJSON(requestParameters['migrationCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Migrates all projects, tasks, notes, reminders, subtasks and files from todoist to vikunja.
     * Migrate all lists, tasks etc. from todoist
     */
    async migrationTodoistMigratePost(requestParameters: MigrationTodoistMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.migrationTodoistMigratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTodoistStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MigrationStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/todoist/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MigrationStatusFromJSON(jsonValue));
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTodoistStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MigrationStatus> {
        const response = await this.migrationTodoistStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from trello to Vikunja.
     * Get the auth url from trello
     */
    async migrationTrelloAuthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlerAuthURL>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/trello/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlerAuthURLFromJSON(jsonValue));
    }

    /**
     * Returns the auth url where the user needs to get its auth code. This code can then be used to migrate everything from trello to Vikunja.
     * Get the auth url from trello
     */
    async migrationTrelloAuthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlerAuthURL> {
        const response = await this.migrationTrelloAuthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Migrates all projects, tasks, notes, reminders, subtasks and files from trello to vikunja.
     * Migrate all projects, tasks etc. from trello
     */
    async migrationTrelloMigratePostRaw(requestParameters: MigrationTrelloMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['migrationCode'] == null) {
            throw new runtime.RequiredError(
                'migrationCode',
                'Required parameter "migrationCode" was null or undefined when calling migrationTrelloMigratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/trello/migrate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrelloMigrationToJSON(requestParameters['migrationCode']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Migrates all projects, tasks, notes, reminders, subtasks and files from trello to vikunja.
     * Migrate all projects, tasks etc. from trello
     */
    async migrationTrelloMigratePost(requestParameters: MigrationTrelloMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.migrationTrelloMigratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTrelloStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MigrationStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/trello/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MigrationStatusFromJSON(jsonValue));
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationTrelloStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MigrationStatus> {
        const response = await this.migrationTrelloStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Imports all projects, tasks, notes, reminders, subtasks and files from a Vikunjda data export into Vikunja.
     * Import all projects, tasks etc. from a Vikunja data export
     */
    async migrationVikunjaFileMigratePostRaw(requestParameters: MigrationVikunjaFileMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['_import'] == null) {
            throw new runtime.RequiredError(
                '_import',
                'Required parameter "_import" was null or undefined when calling migrationVikunjaFileMigratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['_import'] != null) {
            formParams.append('import', requestParameters['_import'] as any);
        }

        const response = await this.request({
            path: `/migration/vikunja-file/migrate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Imports all projects, tasks, notes, reminders, subtasks and files from a Vikunjda data export into Vikunja.
     * Import all projects, tasks etc. from a Vikunja data export
     */
    async migrationVikunjaFileMigratePost(requestParameters: MigrationVikunjaFileMigratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.migrationVikunjaFileMigratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationVikunjaFileStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MigrationStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/migration/vikunja-file/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MigrationStatusFromJSON(jsonValue));
    }

    /**
     * Returns if the current user already did the migation or not. This is useful to show a confirmation message in the frontend if the user is trying to do the same migration again.
     * Get migration status
     */
    async migrationVikunjaFileStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MigrationStatus> {
        const response = await this.migrationVikunjaFileStatusGetRaw(initOverrides);
        return await response.value();
    }

}

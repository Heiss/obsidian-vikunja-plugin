/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-879-f2ac9c2cca
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthToken,
  ModelsLinkSharing,
  ModelsMessage,
  ModelsProjectUser,
  ModelsTeamProject,
  ModelsTeamWithRight,
  ModelsUserWithRight,
  V1LinkShareAuth,
  WebHTTPError,
} from '../models/index';
import {
    AuthTokenFromJSON,
    AuthTokenToJSON,
    ModelsLinkSharingFromJSON,
    ModelsLinkSharingToJSON,
    ModelsMessageFromJSON,
    ModelsMessageToJSON,
    ModelsProjectUserFromJSON,
    ModelsProjectUserToJSON,
    ModelsTeamProjectFromJSON,
    ModelsTeamProjectToJSON,
    ModelsTeamWithRightFromJSON,
    ModelsTeamWithRightToJSON,
    ModelsUserWithRightFromJSON,
    ModelsUserWithRightToJSON,
    V1LinkShareAuthFromJSON,
    V1LinkShareAuthToJSON,
    WebHTTPErrorFromJSON,
    WebHTTPErrorToJSON,
} from '../models/index';

export interface ProjectsIdTeamsGetRequest {
    id: number;
    page?: number;
    perPage?: number;
    s?: string;
}

export interface ProjectsIdTeamsPutRequest {
    id: number;
    project: ModelsTeamProject;
}

export interface ProjectsIdUsersGetRequest {
    id: number;
    page?: number;
    perPage?: number;
    s?: string;
}

export interface ProjectsIdUsersPutRequest {
    id: number;
    project: ModelsProjectUser;
}

export interface ProjectsProjectIDTeamsTeamIDDeleteRequest {
    projectID: number;
    teamID: number;
}

export interface ProjectsProjectIDTeamsTeamIDPostRequest {
    projectID: number;
    teamID: number;
    project: ModelsTeamProject;
}

export interface ProjectsProjectIDUsersUserIDDeleteRequest {
    projectID: number;
    userID: number;
}

export interface ProjectsProjectIDUsersUserIDPostRequest {
    projectID: number;
    userID: number;
    project: ModelsProjectUser;
}

export interface ProjectsProjectSharesGetRequest {
    project: number;
    page?: number;
    perPage?: number;
    s?: string;
}

export interface ProjectsProjectSharesPutRequest {
    project: number;
    label: ModelsLinkSharing;
}

export interface ProjectsProjectSharesShareDeleteRequest {
    project: number;
    share: number;
}

export interface ProjectsProjectSharesShareGetRequest {
    project: number;
    share: number;
}

export interface SharesShareAuthPostRequest {
    share: string;
    password: V1LinkShareAuth;
}

/**
 * 
 */
export class SharingApi extends runtime.BaseAPI {

    /**
     * Mark all notifications of a user as read
     */
    async notificationsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Mark all notifications of a user as read
     */
    async notificationsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.notificationsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a project with all teams which have access on a given project.
     * Get teams on a project
     */
    async projectsIdTeamsGetRaw(requestParameters: ProjectsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsTeamWithRight>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdTeamsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsTeamWithRightFromJSON));
    }

    /**
     * Returns a project with all teams which have access on a given project.
     * Get teams on a project
     */
    async projectsIdTeamsGet(requestParameters: ProjectsIdTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsTeamWithRight>> {
        const response = await this.projectsIdTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gives a team access to a project.
     * Add a team to a project
     */
    async projectsIdTeamsPutRaw(requestParameters: ProjectsIdTeamsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTeamProject>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdTeamsPut().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsIdTeamsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/teams`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTeamProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTeamProjectFromJSON(jsonValue));
    }

    /**
     * Gives a team access to a project.
     * Add a team to a project
     */
    async projectsIdTeamsPut(requestParameters: ProjectsIdTeamsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTeamProject> {
        const response = await this.projectsIdTeamsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a project with all users which have access on a given project.
     * Get users on a project
     */
    async projectsIdUsersGetRaw(requestParameters: ProjectsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsUserWithRight>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdUsersGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsUserWithRightFromJSON));
    }

    /**
     * Returns a project with all users which have access on a given project.
     * Get users on a project
     */
    async projectsIdUsersGet(requestParameters: ProjectsIdUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsUserWithRight>> {
        const response = await this.projectsIdUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gives a user access to a project.
     * Add a user to a project
     */
    async projectsIdUsersPutRaw(requestParameters: ProjectsIdUsersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsProjectUser>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdUsersPut().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsIdUsersPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsProjectUserToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsProjectUserFromJSON(jsonValue));
    }

    /**
     * Gives a user access to a project.
     * Add a user to a project
     */
    async projectsIdUsersPut(requestParameters: ProjectsIdUsersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsProjectUser> {
        const response = await this.projectsIdUsersPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delets a team from a project. The team won\'t have access to the project anymore.
     * Delete a team from a project
     */
    async projectsProjectIDTeamsTeamIDDeleteRaw(requestParameters: ProjectsProjectIDTeamsTeamIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['projectID'] == null) {
            throw new runtime.RequiredError(
                'projectID',
                'Required parameter "projectID" was null or undefined when calling projectsProjectIDTeamsTeamIDDelete().'
            );
        }

        if (requestParameters['teamID'] == null) {
            throw new runtime.RequiredError(
                'teamID',
                'Required parameter "teamID" was null or undefined when calling projectsProjectIDTeamsTeamIDDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{projectID}/teams/{teamID}`.replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters['projectID']))).replace(`{${"teamID"}}`, encodeURIComponent(String(requestParameters['teamID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Delets a team from a project. The team won\'t have access to the project anymore.
     * Delete a team from a project
     */
    async projectsProjectIDTeamsTeamIDDelete(requestParameters: ProjectsProjectIDTeamsTeamIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.projectsProjectIDTeamsTeamIDDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a team <-> project relation. Mostly used to update the right that team has.
     * Update a team <-> project relation
     */
    async projectsProjectIDTeamsTeamIDPostRaw(requestParameters: ProjectsProjectIDTeamsTeamIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsTeamProject>> {
        if (requestParameters['projectID'] == null) {
            throw new runtime.RequiredError(
                'projectID',
                'Required parameter "projectID" was null or undefined when calling projectsProjectIDTeamsTeamIDPost().'
            );
        }

        if (requestParameters['teamID'] == null) {
            throw new runtime.RequiredError(
                'teamID',
                'Required parameter "teamID" was null or undefined when calling projectsProjectIDTeamsTeamIDPost().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectIDTeamsTeamIDPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{projectID}/teams/{teamID}`.replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters['projectID']))).replace(`{${"teamID"}}`, encodeURIComponent(String(requestParameters['teamID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsTeamProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsTeamProjectFromJSON(jsonValue));
    }

    /**
     * Update a team <-> project relation. Mostly used to update the right that team has.
     * Update a team <-> project relation
     */
    async projectsProjectIDTeamsTeamIDPost(requestParameters: ProjectsProjectIDTeamsTeamIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsTeamProject> {
        const response = await this.projectsProjectIDTeamsTeamIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delets a user from a project. The user won\'t have access to the project anymore.
     * Delete a user from a project
     */
    async projectsProjectIDUsersUserIDDeleteRaw(requestParameters: ProjectsProjectIDUsersUserIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['projectID'] == null) {
            throw new runtime.RequiredError(
                'projectID',
                'Required parameter "projectID" was null or undefined when calling projectsProjectIDUsersUserIDDelete().'
            );
        }

        if (requestParameters['userID'] == null) {
            throw new runtime.RequiredError(
                'userID',
                'Required parameter "userID" was null or undefined when calling projectsProjectIDUsersUserIDDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{projectID}/users/{userID}`.replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters['projectID']))).replace(`{${"userID"}}`, encodeURIComponent(String(requestParameters['userID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Delets a user from a project. The user won\'t have access to the project anymore.
     * Delete a user from a project
     */
    async projectsProjectIDUsersUserIDDelete(requestParameters: ProjectsProjectIDUsersUserIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.projectsProjectIDUsersUserIDDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user <-> project relation. Mostly used to update the right that user has.
     * Update a user <-> project relation
     */
    async projectsProjectIDUsersUserIDPostRaw(requestParameters: ProjectsProjectIDUsersUserIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsProjectUser>> {
        if (requestParameters['projectID'] == null) {
            throw new runtime.RequiredError(
                'projectID',
                'Required parameter "projectID" was null or undefined when calling projectsProjectIDUsersUserIDPost().'
            );
        }

        if (requestParameters['userID'] == null) {
            throw new runtime.RequiredError(
                'userID',
                'Required parameter "userID" was null or undefined when calling projectsProjectIDUsersUserIDPost().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectIDUsersUserIDPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{projectID}/users/{userID}`.replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters['projectID']))).replace(`{${"userID"}}`, encodeURIComponent(String(requestParameters['userID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsProjectUserToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsProjectUserFromJSON(jsonValue));
    }

    /**
     * Update a user <-> project relation. Mostly used to update the right that user has.
     * Update a user <-> project relation
     */
    async projectsProjectIDUsersUserIDPost(requestParameters: ProjectsProjectIDUsersUserIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsProjectUser> {
        const response = await this.projectsProjectIDUsersUserIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all link shares which exist for a given project
     * Get all link shares for a project
     */
    async projectsProjectSharesGetRaw(requestParameters: ProjectsProjectSharesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsLinkSharing>>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectSharesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{project}/shares`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsLinkSharingFromJSON));
    }

    /**
     * Returns all link shares which exist for a given project
     * Get all link shares for a project
     */
    async projectsProjectSharesGet(requestParameters: ProjectsProjectSharesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsLinkSharing>> {
        const response = await this.projectsProjectSharesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Share a project via link. The user needs to have write-access to the project to be able do this.
     * Share a project via link
     */
    async projectsProjectSharesPutRaw(requestParameters: ProjectsProjectSharesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsLinkSharing>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectSharesPut().'
            );
        }

        if (requestParameters['label'] == null) {
            throw new runtime.RequiredError(
                'label',
                'Required parameter "label" was null or undefined when calling projectsProjectSharesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{project}/shares`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsLinkSharingToJSON(requestParameters['label']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsLinkSharingFromJSON(jsonValue));
    }

    /**
     * Share a project via link. The user needs to have write-access to the project to be able do this.
     * Share a project via link
     */
    async projectsProjectSharesPut(requestParameters: ProjectsProjectSharesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsLinkSharing> {
        const response = await this.projectsProjectSharesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a link share. The user needs to have write-access to the project to be able do this.
     * Remove a link share
     */
    async projectsProjectSharesShareDeleteRaw(requestParameters: ProjectsProjectSharesShareDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectSharesShareDelete().'
            );
        }

        if (requestParameters['share'] == null) {
            throw new runtime.RequiredError(
                'share',
                'Required parameter "share" was null or undefined when calling projectsProjectSharesShareDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{project}/shares/{share}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"share"}}`, encodeURIComponent(String(requestParameters['share']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Remove a link share. The user needs to have write-access to the project to be able do this.
     * Remove a link share
     */
    async projectsProjectSharesShareDelete(requestParameters: ProjectsProjectSharesShareDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.projectsProjectSharesShareDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns one link share by its ID.
     * Get one link shares for a project
     */
    async projectsProjectSharesShareGetRaw(requestParameters: ProjectsProjectSharesShareGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsLinkSharing>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling projectsProjectSharesShareGet().'
            );
        }

        if (requestParameters['share'] == null) {
            throw new runtime.RequiredError(
                'share',
                'Required parameter "share" was null or undefined when calling projectsProjectSharesShareGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{project}/shares/{share}`.replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"share"}}`, encodeURIComponent(String(requestParameters['share']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsLinkSharingFromJSON(jsonValue));
    }

    /**
     * Returns one link share by its ID.
     * Get one link shares for a project
     */
    async projectsProjectSharesShareGet(requestParameters: ProjectsProjectSharesShareGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsLinkSharing> {
        const response = await this.projectsProjectSharesShareGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a jwt auth token for a shared project from a share hash.
     * Get an auth token for a share
     */
    async sharesShareAuthPostRaw(requestParameters: SharesShareAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthToken>> {
        if (requestParameters['share'] == null) {
            throw new runtime.RequiredError(
                'share',
                'Required parameter "share" was null or undefined when calling sharesShareAuthPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling sharesShareAuthPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/shares/{share}/auth`.replace(`{${"share"}}`, encodeURIComponent(String(requestParameters['share']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LinkShareAuthToJSON(requestParameters['password']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenFromJSON(jsonValue));
    }

    /**
     * Get a jwt auth token for a shared project from a share hash.
     * Get an auth token for a share
     */
    async sharesShareAuthPost(requestParameters: SharesShareAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthToken> {
        const response = await this.sharesShareAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

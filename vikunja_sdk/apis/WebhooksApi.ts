/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-879-f2ac9c2cca
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelsMessage,
  ModelsWebhook,
  WebHTTPError,
} from '../models/index';
import {
    ModelsMessageFromJSON,
    ModelsMessageToJSON,
    ModelsWebhookFromJSON,
    ModelsWebhookToJSON,
    WebHTTPErrorFromJSON,
    WebHTTPErrorToJSON,
} from '../models/index';

export interface ProjectsIdWebhooksGetRequest {
    id: number;
    page?: number;
    perPage?: number;
}

export interface ProjectsIdWebhooksPutRequest {
    id: number;
    webhook: ModelsWebhook;
}

export interface ProjectsIdWebhooksWebhookIDDeleteRequest {
    id: number;
    webhookID: number;
}

export interface ProjectsIdWebhooksWebhookIDPostRequest {
    id: number;
    webhookID: number;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Get all api webhook targets for the specified project.
     * Get all api webhook targets for the specified project
     */
    async projectsIdWebhooksGetRaw(requestParameters: ProjectsIdWebhooksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsWebhook>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdWebhooksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/webhooks`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsWebhookFromJSON));
    }

    /**
     * Get all api webhook targets for the specified project.
     * Get all api webhook targets for the specified project
     */
    async projectsIdWebhooksGet(requestParameters: ProjectsIdWebhooksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsWebhook>> {
        const response = await this.projectsIdWebhooksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a webhook target which receives POST requests about specified events from a project.
     * Create a webhook target
     */
    async projectsIdWebhooksPutRaw(requestParameters: ProjectsIdWebhooksPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsWebhook>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdWebhooksPut().'
            );
        }

        if (requestParameters['webhook'] == null) {
            throw new runtime.RequiredError(
                'webhook',
                'Required parameter "webhook" was null or undefined when calling projectsIdWebhooksPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/webhooks`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsWebhookToJSON(requestParameters['webhook']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsWebhookFromJSON(jsonValue));
    }

    /**
     * Create a webhook target which receives POST requests about specified events from a project.
     * Create a webhook target
     */
    async projectsIdWebhooksPut(requestParameters: ProjectsIdWebhooksPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsWebhook> {
        const response = await this.projectsIdWebhooksPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete any of the project\'s webhook targets.
     * Deletes an existing webhook target
     */
    async projectsIdWebhooksWebhookIDDeleteRaw(requestParameters: ProjectsIdWebhooksWebhookIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdWebhooksWebhookIDDelete().'
            );
        }

        if (requestParameters['webhookID'] == null) {
            throw new runtime.RequiredError(
                'webhookID',
                'Required parameter "webhookID" was null or undefined when calling projectsIdWebhooksWebhookIDDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/webhooks/{webhookID}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"webhookID"}}`, encodeURIComponent(String(requestParameters['webhookID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Delete any of the project\'s webhook targets.
     * Deletes an existing webhook target
     */
    async projectsIdWebhooksWebhookIDDelete(requestParameters: ProjectsIdWebhooksWebhookIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.projectsIdWebhooksWebhookIDDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a webhook target\'s events. You cannot change other values of a webhook.
     * Change a webhook target\'s events.
     */
    async projectsIdWebhooksWebhookIDPostRaw(requestParameters: ProjectsIdWebhooksWebhookIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsWebhook>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling projectsIdWebhooksWebhookIDPost().'
            );
        }

        if (requestParameters['webhookID'] == null) {
            throw new runtime.RequiredError(
                'webhookID',
                'Required parameter "webhookID" was null or undefined when calling projectsIdWebhooksWebhookIDPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/projects/{id}/webhooks/{webhookID}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"webhookID"}}`, encodeURIComponent(String(requestParameters['webhookID']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsWebhookFromJSON(jsonValue));
    }

    /**
     * Change a webhook target\'s events. You cannot change other values of a webhook.
     * Change a webhook target\'s events.
     */
    async projectsIdWebhooksWebhookIDPost(requestParameters: ProjectsIdWebhooksWebhookIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsWebhook> {
        const response = await this.projectsIdWebhooksWebhookIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all possible webhook events to use when creating or updating a webhook target.
     * Get all possible webhook events
     */
    async webhooksEventsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/webhooks/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all possible webhook events to use when creating or updating a webhook target.
     * Get all possible webhook events
     */
    async webhooksEventsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.webhooksEventsGetRaw(initOverrides);
        return await response.value();
    }

}

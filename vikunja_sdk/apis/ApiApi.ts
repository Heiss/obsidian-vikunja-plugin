/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-832-2d358a57cc
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelsAPIToken,
  ModelsMessage,
  ModelsRouteDetail,
  WebHTTPError,
} from '../models/index';
import {
    ModelsAPITokenFromJSON,
    ModelsAPITokenToJSON,
    ModelsMessageFromJSON,
    ModelsMessageToJSON,
    ModelsRouteDetailFromJSON,
    ModelsRouteDetailToJSON,
    WebHTTPErrorFromJSON,
    WebHTTPErrorToJSON,
} from '../models/index';

export interface TokensGetRequest {
    page?: number;
    perPage?: number;
    s?: string;
}

export interface TokensPutRequest {
    token: ModelsAPIToken;
}

export interface TokensTokenIDDeleteRequest {
    tokenID: number;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * Returns a list of all API routes which are available to use with an api token, not a user login.
     * Get a list of all token api routes
     */
    async routesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: ModelsRouteDetail; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of all API routes which are available to use with an api token, not a user login.
     * Get a list of all token api routes
     */
    async routesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: ModelsRouteDetail; }>> {
        const response = await this.routesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns all api tokens the current user has created.
     * Get all api tokens of the current user
     */
    async tokensGetRaw(requestParameters: TokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelsAPIToken>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['s'] != null) {
            queryParameters['s'] = requestParameters['s'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelsAPITokenFromJSON));
    }

    /**
     * Returns all api tokens the current user has created.
     * Get all api tokens of the current user
     */
    async tokensGet(requestParameters: TokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelsAPIToken>> {
        const response = await this.tokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new api token to use on behalf of the user creating it.
     * Create a new api token
     */
    async tokensPutRaw(requestParameters: TokensPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAPIToken>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling tokensPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsAPITokenToJSON(requestParameters['token']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAPITokenFromJSON(jsonValue));
    }

    /**
     * Create a new api token to use on behalf of the user creating it.
     * Create a new api token
     */
    async tokensPut(requestParameters: TokensPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAPIToken> {
        const response = await this.tokensPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete any of the user\'s api tokens.
     * Deletes an existing api token
     */
    async tokensTokenIDDeleteRaw(requestParameters: TokensTokenIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsMessage>> {
        if (requestParameters['tokenID'] == null) {
            throw new runtime.RequiredError(
                'tokenID',
                'Required parameter "tokenID" was null or undefined when calling tokensTokenIDDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // JWTKeyAuth authentication
        }

        const response = await this.request({
            path: `/tokens/{tokenID}`.replace(`{${"tokenID"}}`, encodeURIComponent(String(requestParameters['tokenID']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsMessageFromJSON(jsonValue));
    }

    /**
     * Delete any of the user\'s api tokens.
     * Deletes an existing api token
     */
    async tokensTokenIDDelete(requestParameters: TokensTokenIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsMessage> {
        const response = await this.tokensTokenIDDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-832-2d358a57cc
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelsTaskCollection } from './ModelsTaskCollection';
import {
    ModelsTaskCollectionFromJSON,
    ModelsTaskCollectionFromJSONTyped,
    ModelsTaskCollectionToJSON,
} from './ModelsTaskCollection';
import type { UserUser } from './UserUser';
import {
    UserUserFromJSON,
    UserUserFromJSONTyped,
    UserUserToJSON,
} from './UserUser';

/**
 * 
 * @export
 * @interface ModelsSavedFilter
 */
export interface ModelsSavedFilter {
    /**
     * A timestamp when this filter was created. You cannot change this value.
     * @type {string}
     * @memberof ModelsSavedFilter
     */
    created?: string;
    /**
     * The description of the filter
     * @type {string}
     * @memberof ModelsSavedFilter
     */
    description?: string;
    /**
     * The actual filters this filter contains
     * @type {ModelsTaskCollection}
     * @memberof ModelsSavedFilter
     */
    filters?: ModelsTaskCollection;
    /**
     * The unique numeric id of this saved filter
     * @type {number}
     * @memberof ModelsSavedFilter
     */
    id?: number;
    /**
     * True if the filter is a favorite. Favorite filters show up in a separate parent project together with favorite projects.
     * @type {boolean}
     * @memberof ModelsSavedFilter
     */
    isFavorite?: boolean;
    /**
     * The user who owns this filter
     * @type {UserUser}
     * @memberof ModelsSavedFilter
     */
    owner?: UserUser;
    /**
     * The title of the filter.
     * @type {string}
     * @memberof ModelsSavedFilter
     */
    title?: string;
    /**
     * A timestamp when this filter was last updated. You cannot change this value.
     * @type {string}
     * @memberof ModelsSavedFilter
     */
    updated?: string;
}

/**
 * Check if a given object implements the ModelsSavedFilter interface.
 */
export function instanceOfModelsSavedFilter(value: object): value is ModelsSavedFilter {
    return true;
}

export function ModelsSavedFilterFromJSON(json: any): ModelsSavedFilter {
    return ModelsSavedFilterFromJSONTyped(json, false);
}

export function ModelsSavedFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsSavedFilter {
    if (json == null) {
        return json;
    }
    return {
        
        'created': json['created'] == null ? undefined : json['created'],
        'description': json['description'] == null ? undefined : json['description'],
        'filters': json['filters'] == null ? undefined : ModelsTaskCollectionFromJSON(json['filters']),
        'id': json['id'] == null ? undefined : json['id'],
        'isFavorite': json['is_favorite'] == null ? undefined : json['is_favorite'],
        'owner': json['owner'] == null ? undefined : UserUserFromJSON(json['owner']),
        'title': json['title'] == null ? undefined : json['title'],
        'updated': json['updated'] == null ? undefined : json['updated'],
    };
}

export function ModelsSavedFilterToJSON(value?: ModelsSavedFilter | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created': value['created'],
        'description': value['description'],
        'filters': ModelsTaskCollectionToJSON(value['filters']),
        'id': value['id'],
        'is_favorite': value['isFavorite'],
        'owner': UserUserToJSON(value['owner']),
        'title': value['title'],
        'updated': value['updated'],
    };
}


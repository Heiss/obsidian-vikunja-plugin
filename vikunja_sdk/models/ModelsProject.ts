/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-879-f2ac9c2cca
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelsProjectView } from './ModelsProjectView';
import {
    ModelsProjectViewFromJSON,
    ModelsProjectViewFromJSONTyped,
    ModelsProjectViewToJSON,
} from './ModelsProjectView';
import type { ModelsSubscription } from './ModelsSubscription';
import {
    ModelsSubscriptionFromJSON,
    ModelsSubscriptionFromJSONTyped,
    ModelsSubscriptionToJSON,
} from './ModelsSubscription';
import type { UserUser } from './UserUser';
import {
    UserUserFromJSON,
    UserUserFromJSONTyped,
    UserUserToJSON,
} from './UserUser';

/**
 * 
 * @export
 * @interface ModelsProject
 */
export interface ModelsProject {
    /**
     * Contains a very small version of the project background to use as a blurry preview until the actual background is loaded. Check out https://blurha.sh/ to learn how it works.
     * @type {string}
     * @memberof ModelsProject
     */
    backgroundBlurHash?: string;
    /**
     * Holds extra information about the background set since some background providers require attribution or similar. If not null, the background can be accessed at /projects/{projectID}/background
     * @type {object}
     * @memberof ModelsProject
     */
    backgroundInformation?: object;
    /**
     * A timestamp when this project was created. You cannot change this value.
     * @type {string}
     * @memberof ModelsProject
     */
    created?: string;
    /**
     * The description of the project.
     * @type {string}
     * @memberof ModelsProject
     */
    description?: string;
    /**
     * The hex color of this project
     * @type {string}
     * @memberof ModelsProject
     */
    hexColor?: string;
    /**
     * The unique, numeric id of this project.
     * @type {number}
     * @memberof ModelsProject
     */
    id?: number;
    /**
     * The unique project short identifier. Used to build task identifiers.
     * @type {string}
     * @memberof ModelsProject
     */
    identifier?: string;
    /**
     * Whether a project is archived.
     * @type {boolean}
     * @memberof ModelsProject
     */
    isArchived?: boolean;
    /**
     * True if a project is a favorite. Favorite projects show up in a separate parent project. This value depends on the user making the call to the api.
     * @type {boolean}
     * @memberof ModelsProject
     */
    isFavorite?: boolean;
    /**
     * The user who created this project.
     * @type {UserUser}
     * @memberof ModelsProject
     */
    owner?: UserUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsProject
     */
    parentProjectId?: number;
    /**
     * The position this project has when querying all projects. See the tasks.position property on how to use this.
     * @type {number}
     * @memberof ModelsProject
     */
    position?: number;
    /**
     * The subscription status for the user reading this project. You can only read this property, use the subscription endpoints to modify it.
     * Will only returned when retreiving one project.
     * @type {ModelsSubscription}
     * @memberof ModelsProject
     */
    subscription?: ModelsSubscription;
    /**
     * The title of the project. You'll see this in the overview.
     * @type {string}
     * @memberof ModelsProject
     */
    title?: string;
    /**
     * A timestamp when this project was last updated. You cannot change this value.
     * @type {string}
     * @memberof ModelsProject
     */
    updated?: string;
    /**
     * 
     * @type {Array<ModelsProjectView>}
     * @memberof ModelsProject
     */
    views?: Array<ModelsProjectView>;
}

/**
 * Check if a given object implements the ModelsProject interface.
 */
export function instanceOfModelsProject(value: object): value is ModelsProject {
    return true;
}

export function ModelsProjectFromJSON(json: any): ModelsProject {
    return ModelsProjectFromJSONTyped(json, false);
}

export function ModelsProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsProject {
    if (json == null) {
        return json;
    }
    return {
        
        'backgroundBlurHash': json['background_blur_hash'] == null ? undefined : json['background_blur_hash'],
        'backgroundInformation': json['background_information'] == null ? undefined : json['background_information'],
        'created': json['created'] == null ? undefined : json['created'],
        'description': json['description'] == null ? undefined : json['description'],
        'hexColor': json['hex_color'] == null ? undefined : json['hex_color'],
        'id': json['id'] == null ? undefined : json['id'],
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'isArchived': json['is_archived'] == null ? undefined : json['is_archived'],
        'isFavorite': json['is_favorite'] == null ? undefined : json['is_favorite'],
        'owner': json['owner'] == null ? undefined : UserUserFromJSON(json['owner']),
        'parentProjectId': json['parent_project_id'] == null ? undefined : json['parent_project_id'],
        'position': json['position'] == null ? undefined : json['position'],
        'subscription': json['subscription'] == null ? undefined : ModelsSubscriptionFromJSON(json['subscription']),
        'title': json['title'] == null ? undefined : json['title'],
        'updated': json['updated'] == null ? undefined : json['updated'],
        'views': json['views'] == null ? undefined : ((json['views'] as Array<any>).map(ModelsProjectViewFromJSON)),
    };
}

export function ModelsProjectToJSON(value?: ModelsProject | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'background_blur_hash': value['backgroundBlurHash'],
        'background_information': value['backgroundInformation'],
        'created': value['created'],
        'description': value['description'],
        'hex_color': value['hexColor'],
        'id': value['id'],
        'identifier': value['identifier'],
        'is_archived': value['isArchived'],
        'is_favorite': value['isFavorite'],
        'owner': UserUserToJSON(value['owner']),
        'parent_project_id': value['parentProjectId'],
        'position': value['position'],
        'subscription': ModelsSubscriptionToJSON(value['subscription']),
        'title': value['title'],
        'updated': value['updated'],
        'views': value['views'] == null ? undefined : ((value['views'] as Array<any>).map(ModelsProjectViewToJSON)),
    };
}


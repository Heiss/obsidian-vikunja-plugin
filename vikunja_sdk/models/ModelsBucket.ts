/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-879-f2ac9c2cca
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelsTask } from './ModelsTask';
import {
    ModelsTaskFromJSON,
    ModelsTaskFromJSONTyped,
    ModelsTaskToJSON,
} from './ModelsTask';
import type { UserUser } from './UserUser';
import {
    UserUserFromJSON,
    UserUserFromJSONTyped,
    UserUserToJSON,
} from './UserUser';

/**
 * 
 * @export
 * @interface ModelsBucket
 */
export interface ModelsBucket {
    /**
     * The number of tasks currently in this bucket
     * @type {number}
     * @memberof ModelsBucket
     */
    count?: number;
    /**
     * A timestamp when this bucket was created. You cannot change this value.
     * @type {string}
     * @memberof ModelsBucket
     */
    created?: string;
    /**
     * The user who initially created the bucket.
     * @type {UserUser}
     * @memberof ModelsBucket
     */
    createdBy?: UserUser;
    /**
     * The unique, numeric id of this bucket.
     * @type {number}
     * @memberof ModelsBucket
     */
    id?: number;
    /**
     * How many tasks can be at the same time on this board max
     * @type {number}
     * @memberof ModelsBucket
     */
    limit?: number;
    /**
     * The position this bucket has when querying all buckets. See the tasks.position property on how to use this.
     * @type {number}
     * @memberof ModelsBucket
     */
    position?: number;
    /**
     * The project view this bucket belongs to.
     * @type {number}
     * @memberof ModelsBucket
     */
    projectViewId?: number;
    /**
     * All tasks which belong to this bucket.
     * @type {Array<ModelsTask>}
     * @memberof ModelsBucket
     */
    tasks?: Array<ModelsTask>;
    /**
     * The title of this bucket.
     * @type {string}
     * @memberof ModelsBucket
     */
    title?: string;
    /**
     * A timestamp when this bucket was last updated. You cannot change this value.
     * @type {string}
     * @memberof ModelsBucket
     */
    updated?: string;
}

/**
 * Check if a given object implements the ModelsBucket interface.
 */
export function instanceOfModelsBucket(value: object): value is ModelsBucket {
    return true;
}

export function ModelsBucketFromJSON(json: any): ModelsBucket {
    return ModelsBucketFromJSONTyped(json, false);
}

export function ModelsBucketFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelsBucket {
    if (json == null) {
        return json;
    }
    return {
        
        'count': json['count'] == null ? undefined : json['count'],
        'created': json['created'] == null ? undefined : json['created'],
        'createdBy': json['created_by'] == null ? undefined : UserUserFromJSON(json['created_by']),
        'id': json['id'] == null ? undefined : json['id'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'position': json['position'] == null ? undefined : json['position'],
        'projectViewId': json['project_view_id'] == null ? undefined : json['project_view_id'],
        'tasks': json['tasks'] == null ? undefined : ((json['tasks'] as Array<any>).map(ModelsTaskFromJSON)),
        'title': json['title'] == null ? undefined : json['title'],
        'updated': json['updated'] == null ? undefined : json['updated'],
    };
}

export function ModelsBucketToJSON(value?: ModelsBucket | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'count': value['count'],
        'created': value['created'],
        'created_by': UserUserToJSON(value['createdBy']),
        'id': value['id'],
        'limit': value['limit'],
        'position': value['position'],
        'project_view_id': value['projectViewId'],
        'tasks': value['tasks'] == null ? undefined : ((value['tasks'] as Array<any>).map(ModelsTaskToJSON)),
        'title': value['title'],
        'updated': value['updated'],
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Vikunja API
 * # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we\'re using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja\'s documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: v0.23.0-879-f2ac9c2cca
 * Contact: hello@vikunja.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1UserSettings
 */
export interface V1UserSettings {
    /**
     * If a task is created without a specified project this value should be used. Applies
     * to tasks made directly in API and from clients.
     * @type {number}
     * @memberof V1UserSettings
     */
    defaultProjectId?: number;
    /**
     * If true, the user can be found when searching for their exact email.
     * @type {boolean}
     * @memberof V1UserSettings
     */
    discoverableByEmail?: boolean;
    /**
     * If true, this user can be found by their name or parts of it when searching for it.
     * @type {boolean}
     * @memberof V1UserSettings
     */
    discoverableByName?: boolean;
    /**
     * If enabled, sends email reminders of tasks to the user.
     * @type {boolean}
     * @memberof V1UserSettings
     */
    emailRemindersEnabled?: boolean;
    /**
     * Additional settings only used by the frontend
     * @type {object}
     * @memberof V1UserSettings
     */
    frontendSettings?: object;
    /**
     * The user's language
     * @type {string}
     * @memberof V1UserSettings
     */
    language?: string;
    /**
     * The new name of the current user.
     * @type {string}
     * @memberof V1UserSettings
     */
    name?: string;
    /**
     * If enabled, the user will get an email for their overdue tasks each morning.
     * @type {boolean}
     * @memberof V1UserSettings
     */
    overdueTasksRemindersEnabled?: boolean;
    /**
     * The time when the daily summary of overdue tasks will be sent via email.
     * @type {string}
     * @memberof V1UserSettings
     */
    overdueTasksRemindersTime?: string;
    /**
     * The user's time zone. Used to send task reminders in the time zone of the user.
     * @type {string}
     * @memberof V1UserSettings
     */
    timezone?: string;
    /**
     * The day when the week starts for this user. 0 = sunday, 1 = monday, etc.
     * @type {number}
     * @memberof V1UserSettings
     */
    weekStart?: number;
}

/**
 * Check if a given object implements the V1UserSettings interface.
 */
export function instanceOfV1UserSettings(value: object): value is V1UserSettings {
    return true;
}

export function V1UserSettingsFromJSON(json: any): V1UserSettings {
    return V1UserSettingsFromJSONTyped(json, false);
}

export function V1UserSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1UserSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultProjectId': json['default_project_id'] == null ? undefined : json['default_project_id'],
        'discoverableByEmail': json['discoverable_by_email'] == null ? undefined : json['discoverable_by_email'],
        'discoverableByName': json['discoverable_by_name'] == null ? undefined : json['discoverable_by_name'],
        'emailRemindersEnabled': json['email_reminders_enabled'] == null ? undefined : json['email_reminders_enabled'],
        'frontendSettings': json['frontend_settings'] == null ? undefined : json['frontend_settings'],
        'language': json['language'] == null ? undefined : json['language'],
        'name': json['name'] == null ? undefined : json['name'],
        'overdueTasksRemindersEnabled': json['overdue_tasks_reminders_enabled'] == null ? undefined : json['overdue_tasks_reminders_enabled'],
        'overdueTasksRemindersTime': json['overdue_tasks_reminders_time'] == null ? undefined : json['overdue_tasks_reminders_time'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'weekStart': json['week_start'] == null ? undefined : json['week_start'],
    };
}

export function V1UserSettingsToJSON(value?: V1UserSettings | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'default_project_id': value['defaultProjectId'],
        'discoverable_by_email': value['discoverableByEmail'],
        'discoverable_by_name': value['discoverableByName'],
        'email_reminders_enabled': value['emailRemindersEnabled'],
        'frontend_settings': value['frontendSettings'],
        'language': value['language'],
        'name': value['name'],
        'overdue_tasks_reminders_enabled': value['overdueTasksRemindersEnabled'],
        'overdue_tasks_reminders_time': value['overdueTasksRemindersTime'],
        'timezone': value['timezone'],
        'week_start': value['weekStart'],
    };
}

